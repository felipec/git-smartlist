This tool helps create typical revisions (e.g. `master..@`), so that you
don't have to.

One example would be to list all the commits of all the branches, except the
ones shared in all the branches.

You can achieve that with:

  git log --branches ^master

But what if the base is not `master`, but some other base you are not sure of?

You can find the base with:

  git merge-base $(git rev-parse --branches)

And then use that base as a negative ref, so:

  git log --branches ^$base

It's much easier with `git smartlist`:

  git smartlist log branches

Then you can create an alias:

  git config --global alias.lb 'smartlist log branches'

There are five shorthands that `git smartlist` can help with.

== Aliases ==

The best way to use `git smartlist` is to setup aliases to the different modes,
for example, `git lb` would be the equivalent of `git smartlist log branches`.

First you will need a good log alias, for example 'lg':

  git config --global alias.lg 'log --oneline --decorate --boundary --graph'

Then you can add the following to your configuration (`git config --global --edit`):

  [alias]
    ls = smartlist lg specific
    lm = smartlist lg from
    lc = smartlist lg from-upstream
    la = smartlist lg all
    lb = smartlist lg branches
    ln = smartlist lg negate-upstreams

You can pick any name you want, and only the modes you need, but the two I use the most are:

  git ls # shows only the commits of the current branch
  git lb # shows the commits from all the local branches
  git lb fc/ # shows the commits from the local branches that start with fc/

== Usage ==

=== specific ===

This mode is basically saying: show me this specific branch/branches.

By default it's the equivalent of

  $ git smartlist specific
  => @{upstream}..@

However, if more than one is specified:

  $ git smartlist specific next feature-a
  => next feature-a --not $merge_base

So basically it's a mixture of `from-upstream` and `branches`.

=== all ===

This mode is equivalent to:

  $ git smartlist all
  => --branches --remotes --not $merge_base

=== branches ===

By default this mode is the equivalent of:

  $ git smartlist branches
  => --branches --not $merge_base

However, multiple branches can be specified

  $ git smartlist branches next feature-a
  => next feature-a --not $merge_base

Prefixes and namespaces can be specified too:

  $ git smartlist branches fc/
  => --branches=fc/ --not $merge_base

=== from ===

By default this mode is the equivalent of:

  $ git smartlist from
  => master..@

But you can specify the branch:

  $ git smartlist from feature-a
  => master..feature-a

You can also specify the starting point:

  $ git smartlist from feature-a next
  => next..feature-a

=== from-upstream ===

By default this mode is the equivalent of:

  $ git smartlist from-upstream
  => @{upstream}..@

If there's no upstream configured, `master` is used by default.

You can also specify the branch:

  $ git smartlist from-upstream feature-a
  => feature-a@{upstream}..feature-a

=== negate-upstreams ===

This is the equivalent of multiple `from-upstream` commands; all their upstrams
are negated:

  $ git smartlist negate-upstreams next feature-a
  => next@{u}..next feature@{u}..feature

== Configuration ==

`git smartlist` can be configured globally, or per repository.

=== smartlist.merge-base ===

Whether to use the merge-base functionality. If not set
`git smartlist branches` would simply do `--branches`.

Default: true

=== smartlist.friendly ===

Whether to use friendly names. If not set git IDs (SHA-1) are used instead of
refnames.

Default: false
