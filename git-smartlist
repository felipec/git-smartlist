#!/bin/bash

get_refs () {
	local refs base merge_base friendly

	[[ "$(git config --type=bool smartlist.merge-base)" == "false" ]] ||
	merge_base=y

	[[ "$(git config --type=bool smartlist.friendly)" == "true" ]] &&
	friendly=y

	# shellcheck disable=SC2207
	refs=($(git rev-parse --symbolic "$@"))
	if [[ -n "$merge_base" && ${#refs[@]} -gt 1 ]]; then
		base=$(git merge-base "${refs[@]}")
		[[ -n "$friendly" ]] &&
		base=$(git name-rev --always --name-only "${refs[@]/#/--refs=}" $base)
		echo "$@" "--not $base"
	else
		echo "$@"
	fi
}

parse_branches () {
	local opt

	if [[ $# -eq 0 ]]; then
		echo '--branches'
	else
		for opt in "$@"; do
			case "$opt" in
				*\*|*/) echo "--branches=$opt" ;;
				*) echo "$opt" ;;
			esac
		done
	fi
}

get_from () {
	local branch=${1:-@} from=${2:-master}
	echo "$from..$branch"
}

get_from_upstream () {
	local branch=${1:-@} default="${2-master}"
	local u="${branch}@{u}"
	# XXX git isn't quiet
	git rev-parse --verify --quiet "$u" > /dev/null 2>&1 || u=$default
	echo "${u}..$branch"
}

negate_upstreams () {
	local branches b

	branches="$(git rev-parse --symbolic "$@")"
	for b in $branches; do
		get_from_upstream "$b"
	done
}

get_specific () {
	if [[ $# -lt 2 ]]; then
		get_from_upstream "$1"
	else
		get_refs $(parse_branches "$@")
	fi
}

usage () {
	cat <<-EOF >&2
	usage: $(basename $0) <command> <action>

	Command
	    echo (display the output)
	    * (a git command, e.g. log)

	Action
	    specific [<branches>]
	    all
	    branches [<branches>]
	    from [<branch>] [<from>]
	    from-upstream [<branch>] [<default>]
	    negate-upstreams <branches>
	EOF
}

get_list () {
	local cmd opts IFS=$'\n'

	git rev-parse --git-dir > /dev/null || exit 1

	cmd=$1
	shift

	# If a range is already specified, don't do anything
	if [[ "$1" = *".."* ]]; then
		echo "$@"
		return
	fi

	while test -n "$1"; do
		test "$1" == '--' && break
		opts="${opts+${opts}$'\n'}$1"
		shift
	done

	case $cmd in
	all)
		opts="$(get_refs --branches --remotes $opts)"
		;;
	branches)
		opts="$(get_refs $(parse_branches $opts))"
		;;
	from)
		opts="$(get_from $opts)"
		;;
	from-upstream)
		opts="$(get_from_upstream $opts)"
		;;
	negate-upstreams)
		opts="$(negate_upstreams $opts)"
		;;
	specific)
		opts="$(get_specific $opts)"
		;;
	*)
		echo "Unknown command '$cmd'" >&2
		usage
		exit 1
		;;
	esac

	echo "${opts}""${1+ $@}"
}

main () {
	local cmd=$1
	shift
	if [[ $cmd = "echo" ]]; then
		get_list "$@"
	else
		# Clearly a bug in POSIX
		rev="$(get_list "$@")" || exit $?
		git $cmd $rev
	fi
}

if [[ -z "$1" ]]; then
	usage
	exit 1
fi

main "$@"
